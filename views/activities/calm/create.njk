{% extends "layouts/layout.njk" %}

{% from "partials/breadcrumbs.njk" import breadcrumbs %}

{% block content %}
<div class="container my-5">
  {{ breadcrumbs([{ label: "Home", url: "/" }, { label: "Calm Activities", url: "/activities/calm" }, { label: "Create", url: "#" }]) }}
  <div class="card shadow-lg p-4">
    <h2 class="text-center text-primary mb-4">Create a New Calm Activity</h2>

    <form action="/api/calm" method="POST" enctype="multipart/form-data">
      <!-- Title -->
      <div class="mb-3">
        <label for="title" class="form-label fw-bold">Title</label>
        <input type="text" class="form-control" id="title" name="title" required placeholder="Enter activity title">
      </div>

      <!-- Description -->
      <div class="mb-3">
        <label for="description" class="form-label fw-bold">Description</label>
        <textarea class="form-control" id="description" name="description" rows="3"
          placeholder="Describe the activity"></textarea>
      </div>

      <!-- Summary -->
      <div class="mb-3">
        <label for="summary" class="form-label fw-bold">Summary</label>
        <input type="text" class="form-control" id="summary" name="summary" placeholder="Enter a brief summary">
      </div>

      <!-- URL (now file upload) -->
      <div class="mb-3">
        <label for="url" class="form-label fw-bold">Resource File</label>
        <input type="file" class="form-control" id="url" name="url" accept=".mp3" required>
        <div class="form-text text-muted">Maximum file size: 10MB. Supported format: MP3 audio files.</div>
        <div id="audioInfo" class="mt-2 d-none">
          <small class="text-success">âœ“ Audio file selected: <span id="audioName"></span> (<span id="audioSize"></span>)</small>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="d-grid">
        <button type="submit" class="btn btn-success">Create Activity</button>
      </div>
    </form>

    <div class="text-center mt-3">
      <a href="/activities/calm" class="btn btn-outline-secondary">Back to Activities</a>
    </div>
  </div>
</div>

<!-- Full Screen Loading Overlay -->
<div id="loadingOverlay" class="position-fixed top-0 start-0 w-100 h-100 d-none" style="background: rgba(0, 0, 0, 0.7); z-index: 9999;">
  <div class="d-flex flex-column justify-content-center align-items-center h-100 text-white">
    <div class="spinner-border text-light mb-3" style="width: 3rem; height: 3rem;" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <h4 id="loadingMessage" class="text-light mb-2">Processing...</h4>
    <p id="loadingSubMessage" class="text-light-50 mb-0">Please wait while we upload your audio file and create the activity.</p>
  </div>
</div>

<script>
  // File size validation constants
  const MAX_AUDIO_SIZE = 10 * 1024 * 1024; // 10MB
  
  // Loading overlay functions
  function showLoading(message = 'Processing...', subMessage = 'Please wait while we upload your audio file and create the activity.') {
    document.getElementById('loadingMessage').textContent = message;
    document.getElementById('loadingSubMessage').textContent = subMessage;
    document.getElementById('loadingOverlay').classList.remove('d-none');
  }
  
  function hideLoading() {
    document.getElementById('loadingOverlay').classList.add('d-none');
  }
  
  function updateLoadingMessage(message, subMessage) {
    document.getElementById('loadingMessage').textContent = message;
    if (subMessage) {
      document.getElementById('loadingSubMessage').textContent = subMessage;
    }
  }
  
  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
  
  function validateFileSize(file, inputName, maxSize, maxSizeMB) {
    if (file && file.size > maxSize) {
      alert(`${inputName} is too large! Maximum file size is ${maxSizeMB}MB.`);
      return false;
    }
    return true;
  }
  
  function showFileInfo(file, infoId, nameId, sizeId) {
    const infoDiv = document.getElementById(infoId);
    const nameSpan = document.getElementById(nameId);
    const sizeSpan = document.getElementById(sizeId);
    
    if (file) {
      nameSpan.textContent = file.name;
      sizeSpan.textContent = formatFileSize(file.size);
      infoDiv.classList.remove('d-none');
    } else {
      infoDiv.classList.add('d-none');
    }
  }
  
  // Add file size validation and info display to audio input
  document.getElementById('url').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      if (!validateFileSize(file, 'Audio file', MAX_AUDIO_SIZE, 10)) {
        this.value = ''; // Clear the file input
        showFileInfo(null, 'audioInfo', 'audioName', 'audioSize');
        return;
      }
      showFileInfo(file, 'audioInfo', 'audioName', 'audioSize');
    } else {
      showFileInfo(null, 'audioInfo', 'audioName', 'audioSize');
    }
  });

  // Handle form submission
  document.querySelector('form').addEventListener('submit', async function(event) {
    event.preventDefault();
    
    // Validate file size before submission
    const audioFile = document.getElementById('url').files[0];
    
    if (audioFile && !validateFileSize(audioFile, 'Audio file', MAX_AUDIO_SIZE, 10)) {
      return;
    }
    
    // Create FormData object for file upload
    const formData = new FormData(this);

    console.log('=== SENDING CALM FORM DATA ===');
    console.log('FormData created:', formData);
    console.log('FormData entries:');
    for (let [key, value] of formData.entries()) {
      console.log(key, ':', value);
    }

    try {
      showLoading('Uploading audio...', 'Please wait while we upload your audio file.');
      const response = await fetch(this.action, {
        method: 'POST',
        body: formData
      });

      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers);

      if (response.ok) {
        alert('Calm activity created successfully!');
        window.location.href = '/activities/calm';
      } else {
        // Try to get the error response
        let errorMessage = 'Unknown error';
        
        try {
          const errorData = await response.json();
          console.log('Error response data:', errorData);
          errorMessage = errorData.message || errorData.error || 'Unknown error';
        } catch (parseError) {
          console.log('Could not parse error response as JSON, trying text...');
          try {
            const errorText = await response.text();
            console.log('Error response text:', errorText);
            errorMessage = errorText || 'Unknown error';
          } catch (textError) {
            console.log('Could not read error response:', textError);
          }
        }
        
        alert(`Failed to create calm activity: ${errorMessage}`);
      }
    } catch (error) {
      console.error('Network or fetch error:', error);
      alert('An error occurred while connecting to the server. Please try again.');
    } finally {
      hideLoading();
    }
  });
</script>

{% endblock %}