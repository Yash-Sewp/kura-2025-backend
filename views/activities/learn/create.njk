{% extends "layouts/layout.njk" %}

{% from "partials/breadcrumbs.njk" import breadcrumbs %}

{% block content %}
<div class="container my-5">
  {{ breadcrumbs([{ label: "Home", url: "/" }, { label: "Learn Activities", url: "/activities/learn" }, { label: "Create", url: "#" }]) }}
  <div class="card shadow-lg p-4">
    <h2 class="text-center text-primary mb-4">Create a New Learn Activity</h2>

    <form id="learnForm" action="/api/learn" method="POST" enctype="multipart/form-data">
      <!-- Title -->
      <div class="mb-3">
        <label for="title" class="form-label fw-bold">Title</label>
        <input type="text" class="form-control" id="title" name="title" required placeholder="Enter activity title">
      </div>

      <!-- Sub Title -->
      <div class="mb-3">
        <label for="subTitle" class="form-label fw-bold">Sub Title</label>
        <input type="text" class="form-control" id="subTitle" name="subTitle" placeholder="Enter sub title">
      </div>

      <!-- Instructor -->
      <div class="mb-3">
        <label for="instructor" class="form-label fw-bold">Instructor</label>
        <input type="text" class="form-control" id="instructor" name="instructor" placeholder="Enter instructor name">
      </div>

      <!-- Feature Image -->
      <div class="mb-3">
        <label for="featureImage" class="form-label fw-bold">Feature Image</label>
        <input type="file" class="form-control" id="featureImage" name="featureImage" accept="image/*">
        <div class="form-text text-muted">Maximum file size: 10MB. Supported formats: JPG, PNG, GIF, etc.</div>
        <div id="featureImageInfo" class="mt-2 d-none">
          <small class="text-success">âœ“ Image selected: <span id="featureImageName"></span> (<span id="featureImageSize"></span>)</small>
        </div>
      </div>

      <!-- Description -->
      <div class="mb-3">
        <label for="description" class="form-label fw-bold">Description</label>
        <textarea class="form-control" id="description" name="description" rows="4" placeholder="Enter activity description"></textarea>
      </div>

      <!-- Community Score -->
      <div class="mb-3">
        <label for="communityScore" class="form-label fw-bold">Community Score</label>
        <input type="number" class="form-control" id="communityScore" name="communityScore" min="0" max="100" placeholder="Enter community score (0-100)">
      </div>

      <!-- Videos -->
      <div class="mb-3">
        <label for="videos" class="form-label fw-bold">Videos</label>
        <div class="form-text text-muted mb-2">Maximum file size: 50MB per video. Supported formats: MP4, AVI, MOV, etc.</div>
        <div id="video-fields">
          <div class="input-group mb-2">
            <input type="text" class="form-control" name="videoTitles" placeholder="Video title">
            <input type="file" class="form-control video-file" name="videoFiles" accept="video/*">
            <div class="input-group-text">
              <small class="text-muted">50MB max</small>
            </div>
          </div>
        </div>
        <button type="button" class="btn btn-secondary" onclick="addVideoField()">Add Another Video</button>
      </div>

      <!-- Audios -->
      <div class="mb-3">
        <label for="audios" class="form-label fw-bold">Audios</label>
        <div class="form-text text-muted mb-2">Maximum file size: 10MB per audio. Supported formats: MP3, WAV, etc.</div>
        <div id="audio-fields">
          <div class="input-group mb-2">
            <input type="text" class="form-control" name="audioTitles" placeholder="Audio title">
            <input type="file" class="form-control audio-file" name="audioFiles" accept="audio/*">
            <div class="input-group-text">
              <small class="text-muted">10MB max</small>
            </div>
          </div>
        </div>
        <button type="button" class="btn btn-secondary" onclick="addAudioField()">Add Another Audio</button>
      </div>

      <!-- Submit Button -->
      <div class="d-grid">
        <button type="submit" class="btn btn-success">Create Activity</button>
      </div>
    </form>

    <div class="text-center mt-3">
      <a href="/activities/learn" class="btn btn-outline-secondary">Back to Activities</a>
    </div>
  </div>
</div>

<!-- Full Screen Loading Overlay -->
<div id="loadingOverlay" class="position-fixed top-0 start-0 w-100 h-100 d-none" style="background: rgba(0, 0, 0, 0.7); z-index: 9999;">
  <div class="d-flex flex-column justify-content-center align-items-center h-100 text-white">
    <div class="spinner-border text-light mb-3" style="width: 3rem; height: 3rem;" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <h4 id="loadingMessage" class="text-light mb-2">Processing...</h4>
    <p id="loadingSubMessage" class="text-light-50 mb-0">Please wait while we upload your files and create the activity.</p>
  </div>
</div>

<script>
  // File size validation constants
  const MAX_IMAGE_SIZE = 10 * 1024 * 1024; // 10MB for images
  const MAX_VIDEO_SIZE = 50 * 1024 * 1024; // 50MB for videos
  const MAX_AUDIO_SIZE = 10 * 1024 * 1024; // 10MB for audio
  
  // Loading overlay functions
  function showLoading(message = 'Processing...', subMessage = 'Please wait while we upload your files and create the activity.') {
    document.getElementById('loadingMessage').textContent = message;
    document.getElementById('loadingSubMessage').textContent = subMessage;
    document.getElementById('loadingOverlay').classList.remove('d-none');
  }
  
  function hideLoading() {
    document.getElementById('loadingOverlay').classList.add('d-none');
  }
  
  function updateLoadingMessage(message, subMessage) {
    document.getElementById('loadingMessage').textContent = message;
    if (subMessage) {
      document.getElementById('loadingSubMessage').textContent = subMessage;
    }
  }
  
  let videoIndex = 1;
  let audioIndex = 1;

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
  
  function validateFileSize(file, inputName, maxSize, maxSizeMB) {
    if (file && file.size > maxSize) {
      alert(`${inputName} is too large! Maximum file size is ${maxSizeMB}MB.`);
      return false;
    }
    return true;
  }
  
  function showFileInfo(file, infoId, nameId, sizeId) {
    const infoDiv = document.getElementById(infoId);
    if (!infoDiv) return; // Skip if element doesn't exist
    
    const nameSpan = document.getElementById(nameId);
    const sizeSpan = document.getElementById(sizeId);
    
    if (file) {
      nameSpan.textContent = file.name;
      sizeSpan.textContent = formatFileSize(file.size);
      infoDiv.classList.remove('d-none');
    } else {
      infoDiv.classList.add('d-none');
    }
  }

  // Add file size validation to feature image
  document.getElementById('featureImage').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      if (!validateFileSize(file, 'Feature image', MAX_IMAGE_SIZE, 10)) {
        this.value = ''; // Clear the file input
        showFileInfo(null, 'featureImageInfo', 'featureImageName', 'featureImageSize');
        return;
      }
      showFileInfo(file, 'featureImageInfo', 'featureImageName', 'featureImageSize');
    } else {
      showFileInfo(null, 'featureImageInfo', 'featureImageName', 'featureImageSize');
    }
  });

  // Add file size validation to existing video and audio inputs
  document.addEventListener('DOMContentLoaded', function() {
    // Validate existing video files
    document.querySelectorAll('.video-file').forEach(function(input) {
      input.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file && !validateFileSize(file, 'Video file', MAX_VIDEO_SIZE, 50)) {
          this.value = ''; // Clear the file input
        }
      });
    });

    // Validate existing audio files
    document.querySelectorAll('.audio-file').forEach(function(input) {
      input.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file && !validateFileSize(file, 'Audio file', MAX_AUDIO_SIZE, 10)) {
          this.value = ''; // Clear the file input
        }
      });
    });
  });

  function addVideoField() {
    const videoFields = document.getElementById('video-fields');
    const newField = document.createElement('div');
    newField.className = 'input-group mb-2';
    newField.innerHTML = `
      <input type="text" class="form-control" name="videoTitles" placeholder="Video title" required>
      <input type="file" class="form-control video-file" name="videoFiles" accept="video/*">
      <div class="input-group-text">
        <small class="text-muted">50MB max</small>
      </div>
    `;
    videoFields.appendChild(newField);
    
    // Add validation to the new video input
    const newVideoInput = newField.querySelector('.video-file');
    newVideoInput.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file && !validateFileSize(file, 'Video file', MAX_VIDEO_SIZE, 50)) {
        this.value = ''; // Clear the file input
      }
    });
    
    videoIndex++;
  }

  function addAudioField() {
    const audioFields = document.getElementById('audio-fields');
    const newField = document.createElement('div');
    newField.className = 'input-group mb-2';
    newField.innerHTML = `
      <input type="text" class="form-control" name="audioTitles" placeholder="Audio title" required>
      <input type="file" class="form-control audio-file" name="audioFiles" accept="audio/*">
      <div class="input-group-text">
        <small class="text-muted">10MB max</small>
      </div>
    `;
    audioFields.appendChild(newField);
    
    // Add validation to the new audio input
    const newAudioInput = newField.querySelector('.audio-file');
    newAudioInput.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file && !validateFileSize(file, 'Audio file', MAX_AUDIO_SIZE, 10)) {
        this.value = ''; // Clear the file input
      }
    });
    
    audioIndex++;
  }

  // Enhanced form submission with file validation
  document.getElementById('learnForm').addEventListener('submit', async function(event) {
    event.preventDefault();
    
    // Validate all files before submission
    const featureImage = document.getElementById('featureImage').files[0];
    const videoFiles = document.querySelectorAll('.video-file');
    const audioFiles = document.querySelectorAll('.audio-file');
    
    // Validate feature image
    if (featureImage && !validateFileSize(featureImage, 'Feature image', MAX_IMAGE_SIZE, 10)) {
      return;
    }
    
    // Validate all video files
    for (let videoInput of videoFiles) {
      const file = videoInput.files[0];
      if (file && !validateFileSize(file, 'Video file', MAX_VIDEO_SIZE, 50)) {
        return;
      }
    }
    
    // Validate all audio files
    for (let audioInput of audioFiles) {
      const file = audioInput.files[0];
      if (file && !validateFileSize(file, 'Audio file', MAX_AUDIO_SIZE, 10)) {
        return;
      }
    }
    
    // Create FormData object for file upload
    const formData = new FormData(this);

    console.log('=== SENDING LEARN FORM DATA ===');
    console.log('FormData created:', formData);
    console.log('FormData entries:');
    for (let [key, value] of formData.entries()) {
      console.log(key, ':', value);
    }

    try {
      showLoading('Uploading files...', 'Please wait while we upload your files.');
      const response = await fetch(this.action, {
        method: 'POST',
        body: formData
      });

      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers);

      if (response.ok) {
        alert('Learn activity created successfully!');
        window.location.href = '/activities/learn';
      } else {
        // Try to get the error response
        let errorMessage = 'Unknown error';
        
        try {
          const errorData = await response.json();
          console.log('Error response data:', errorData);
          errorMessage = errorData.message || errorData.error || 'Unknown error';
        } catch (parseError) {
          console.log('Could not parse error response as JSON, trying text...');
          try {
            const errorText = await response.text();
            console.log('Error response text:', errorText);
            errorMessage = errorText || 'Unknown error';
          } catch (textError) {
            console.log('Could not read error response:', textError);
          }
        }
        
        alert(`Failed to create learn activity: ${errorMessage}`);
      }
    } catch (error) {
      console.error('Network or fetch error:', error);
      alert('An error occurred while connecting to the server. Please try again.');
    } finally {
      hideLoading();
    }
  });
</script>
{% endblock %}