{% extends "layouts/layout.njk" %}

{% from "partials/breadcrumbs.njk" import breadcrumbs %}

{% block content %}
<div class="container my-5">
  {{ breadcrumbs([{ label: "Home", url: "/" }, { label: "Move Activities", url: "/activities/move" }, { label: "Create", url: "#" }]) }}
  <div class="card shadow-lg p-4">
    <h2 class="text-center text-primary mb-4">Create Move Activity</h2>

    <form id="moveForm" action="/api/move" method="POST" enctype="multipart/form-data">
      <div class="mb-3">
        <label for="title" class="form-label fw-bold">Title</label>
        <input type="text" class="form-control" id="title" name="title" required>
      </div>
      <div class="mb-3">
        <label for="description" class="form-label fw-bold">Description</label>
        <textarea class="form-control" id="description" name="description"></textarea>
      </div>
      <div class="mb-5">
        <label for="videoFile" class="form-label">Video File</label>
        <input type="file" class="form-control" id="videoFile" name="videoFile" accept="video/*">
        <div class="form-text text-muted">Maximum file size: 50MB. Supported formats: MP4, AVI, MOV, etc.</div>
        <div id="videoInfo" class="mt-2 d-none">
          <small class="text-success">✓ Video selected: <span id="videoName"></span> (<span id="videoSize"></span>)</small>
        </div>
        <div id="videoUploading" class="mt-2 d-none">
          <div class="d-flex align-items-center">
            <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
              <span class="visually-hidden">Uploading...</span>
            </div>
            <small class="text-primary">Uploading video to Cloudinary...</small>
          </div>
        </div>
        {% if moveActivity.videoUrl %}
          <div class="mt-2">
            <a href="{{ moveActivity.videoUrl }}" target="_blank" class="btn btn-outline-secondary">View Current Video</a>
          </div>
        {% endif %}
      </div>

      <div class="mb-5">
        <label for="imageFile" class="form-label">Image File</label>
        <input type="file" class="form-control" id="imageFile" name="imageFile" accept="image/*">
        <div class="form-text text-muted">Maximum file size: 10MB. Supported formats: JPG, PNG, GIF, etc.</div>
        <div id="imageInfo" class="mt-2 d-none">
          <small class="text-success">✓ Image selected: <span id="imageName"></span> (<span id="imageSize"></span>)</small>
        </div>
        <div id="imageUploading" class="mt-2 d-none">
          <div class="d-flex align-items-center">
            <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
              <span class="visually-hidden">Uploading...</span>
            </div>
            <small class="text-primary">Uploading image to Cloudinary...</small>
          </div>
        </div>
        {% if moveActivity.imagePlaceholder %}
          <div class="mt-2">
            <img src="{{ moveActivity.imagePlaceholder }}" alt="Current Image" style="max-width: 200px;">
          </div>
        {% endif %}
      </div>
      
      <div class="d-grid">
        <button type="submit" class="btn btn-success" id="submitBtn">
          <span class="btn-text">Create Activity</span>
          <span class="btn-loading d-none">
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            Creating Activity...
          </span>
        </button>
      </div>
    </form>

    <div class="text-center mt-3">
      <a href="/activities/move" class="btn btn-outline-secondary">Back to Activities</a>
    </div>
  </div>
</div>

<!-- Full Screen Loading Overlay -->
<div id="loadingOverlay" class="position-fixed top-0 start-0 w-100 h-100 d-none" style="background: rgba(0, 0, 0, 0.7); z-index: 9999;">
  <div class="d-flex flex-column justify-content-center align-items-center h-100 text-white">
    <div class="spinner-border text-light mb-3" style="width: 3rem; height: 3rem;" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <h4 id="loadingMessage" class="text-light mb-2">Processing...</h4>
    <p id="loadingSubMessage" class="text-light-50 mb-0">Please wait while we upload your files and create the activity.</p>
  </div>
</div>

<script>
  // File size validation constants
  const MAX_VIDEO_SIZE = 50 * 1024 * 1024; // 50MB
  const MAX_IMAGE_SIZE = 10 * 1024 * 1024; // 10MB
  
  // Loading overlay functions
  function showLoading(message = 'Processing...', subMessage = 'Please wait while we upload your files and create the activity.') {
    document.getElementById('loadingMessage').textContent = message;
    document.getElementById('loadingSubMessage').textContent = subMessage;
    document.getElementById('loadingOverlay').classList.remove('d-none');
  }
  
  function hideLoading() {
    document.getElementById('loadingOverlay').classList.add('d-none');
  }
  
  function updateLoadingMessage(message, subMessage) {
    document.getElementById('loadingMessage').textContent = message;
    if (subMessage) {
      document.getElementById('loadingSubMessage').textContent = subMessage;
    }
  }
  
  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
  
  function validateFileSize(file, inputName, maxSize, maxSizeMB) {
    if (file && file.size > maxSize) {
      alert(`${inputName} is too large! Maximum file size is ${maxSizeMB}MB.`);
      return false;
    }
    return true;
  }
  
  function showFileInfo(file, infoId, nameId, sizeId) {
    const infoDiv = document.getElementById(infoId);
    const nameSpan = document.getElementById(nameId);
    const sizeSpan = document.getElementById(sizeId);
    
    if (file) {
      nameSpan.textContent = file.name;
      sizeSpan.textContent = formatFileSize(file.size);
      infoDiv.classList.remove('d-none');
    } else {
      infoDiv.classList.add('d-none');
    }
  }
  
  // Add file size validation and info display to file inputs
  document.getElementById('videoFile').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      if (!validateFileSize(file, 'Video file', MAX_VIDEO_SIZE, 50)) {
        this.value = ''; // Clear the file input
        showFileInfo(null, 'videoInfo', 'videoName', 'videoSize');
        return;
      }
      showFileInfo(file, 'videoInfo', 'videoName', 'videoSize');
    } else {
      showFileInfo(null, 'videoInfo', 'videoName', 'videoSize');
    }
  });
  
  document.getElementById('imageFile').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      if (!validateFileSize(file, 'Image file', MAX_IMAGE_SIZE, 10)) {
        this.value = ''; // Clear the file input
        showFileInfo(null, 'imageInfo', 'imageName', 'imageSize');
        return;
      }
      showFileInfo(file, 'imageInfo', 'imageName', 'imageSize');
    } else {
      showFileInfo(null, 'imageInfo', 'imageName', 'imageSize');
    }
  });

  document.getElementById('moveForm').addEventListener('submit', async function(event) {
    event.preventDefault();
    
    // Validate file sizes before submission
    const videoFile = document.getElementById('videoFile').files[0];
    const imageFile = document.getElementById('imageFile').files[0];
    
    if (videoFile && !validateFileSize(videoFile, 'Video file', MAX_VIDEO_SIZE, 50)) {
      return;
    }
    
    if (imageFile && !validateFileSize(imageFile, 'Image file', MAX_IMAGE_SIZE, 10)) {
      return;
    }
    
    // Show loading overlay
    showLoading('Preparing to upload...', 'Validating files and preparing form data...');
    
    // Create FormData object for file uploads
    const formData = new FormData(this);

    console.log("=== FORMDATA DEBUG ===");
    console.log("FormData created:", formData);
    console.log("FormData entries:");
    for (let [key, value] of formData.entries()) {
      console.log(key, ':', value);
    }

    try {
      // Update loading message for upload
      updateLoadingMessage('Uploading files...', 'Please wait while we upload your files to Cloudinary...');
      
      console.log('=== FETCH REQUEST DEBUG ===');
      console.log('Sending fetch request to:', this.action);
      console.log('Request method:', 'POST');
      console.log('Request body:', formData);
      
      const response = await fetch(this.action, {
        method: 'POST',
        body: formData
      });

      // Update loading message for processing
      updateLoadingMessage('Processing...', 'Creating your move activity...');

      console.log('=== RESPONSE DEBUG ===');
      console.log('Response received:', response);
      console.log('Response status:', response.status);
      console.log('Response status text:', response.statusText);
      console.log('Response headers:', response.headers);

      if (response.ok) {
        updateLoadingMessage('Success!', 'Your move activity has been created successfully!');
        setTimeout(() => {
          hideLoading();
          alert('Move activity created successfully!');
          window.location.href = '/activities/move';
        }, 1000);
      } else {
        hideLoading();
        const contentType = response.headers.get('content-type');
        console.log('Response content-type:', contentType);
        
        if (contentType && contentType.includes('application/json')) {
          const errorData = await response.json();
          console.log('Error data:', errorData);
          alert(`Failed to create move activity: ${errorData.message || errorData.error || 'Unknown error'}`);
        } else {
          // Handle non-JSON responses (like HTML error pages)
          const errorText = await response.text();
          console.log('Error text:', errorText);
          if (errorText.includes('File too large')) {
            alert('File too large! Please choose a file smaller than 50MB.');
          } else {
            alert('An error occurred. Please try again.');
          }
        }
      }
    } catch (error) {
      hideLoading();
      console.error('=== FETCH ERROR ===');
      console.error('Fetch error:', error);
      console.error('Error name:', error.name);
      console.error('Error message:', error.message);
      console.error('Error stack:', error.stack);
      alert('An error occurred while connecting to the server. Please try again.');
    }
  });
</script>
{% endblock %}